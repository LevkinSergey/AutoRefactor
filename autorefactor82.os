#Использовать asserts

Procedure main()
	Перем extractor, мАргументыКС, сТекстОшибки, оФайл; 
	Перем мФайлыEPF, мФайлыBSL;
	Перем PathIn, PathOut; 				// Аргументы командной строки
	Перем сПуть_ФайлTEMPОбработка; 		// Исходный файл обработки в TEMP
	Перем сПуть_КаталогTEMP; 			// Каталог в TEMP в Системе
	Перем сПуть_КаталогРазборки;		// Каталог в котороый проведена разборка обработки
	Перем сПуть_ФайлМастерОбработка;	// Каталог релизов
	Перем сИмя_МастерОбработка;			// Релизная мастер-обработка
	Перем EPF, BSL;
	
	// КОНСТАНТЫ
	EPF = "*.epf";
	BSL = "*.bsl";
	
	extractor = ЗагрузитьСценарий("v8files-extractor.os");
	
	мАргументыКС = АргументыКоманднойСтроки;	
	Если мАргументыКС.Количество()=2 Тогда
		PathIn 	= мАргументыКС[0];
		PathOut = мАргументыКС[1];
		
		оФайл = Новый Файл(PathIn);
		Если НЕ оФайл.Существует() Тогда
			сТекстОшибки = "Исходный каталог %1 не существует";
			сТекстОшибки = СтрШаблон(сТекстОшибки, PathIn);
			СообщитьПользователю(сТекстОшибки,2);
			Возврат;
		КонецЕсли;
		
		оФайл = Новый Файл(PathOut);
		Если НЕ оФайл.Существует() Тогда
			сТекстОшибки = "Конечный каталог %1 не существует";
			сТекстОшибки = СтрШаблон(сТекстОшибки, PathOut);
			СообщитьПользователю(сТекстОшибки,2);
			Возврат;
		КонецЕсли;		
	Иначе
		сТекстОшибки = "В командной строке должно быть два аргумента: Каталог исходной обработки, Целевой каталог";
		СообщитьПользователю(сТекстОшибки,2);
		Возврат;
	КонецЕсли;
	
	мФайлыEPF = НайтиФайлы(PathIn, EPF, Ложь);
	Если мФайлыEPF.Количество() = 1 Тогда
		сПуть_ФайлTEMPОбработка = "";
		Если НЕ КопироватьОбработкуВTMP(мФайлыEPF[0], сПуть_ФайлTEMPОбработка) Тогда
			сТекстОшибки = "Ошибка при копировании обработки из %1 в TEMP";
			СообщитьПользователю(сТекстОшибки,2);
			Возврат;
		КонецЕсли;						
	Иначе	
		сТекстОшибки = "Файл обработки в каталоге %1 не найден или в каталоге несколько обработок.";
		сТекстОшибки = СтрШаблон(сТекстОшибки, PathIn);
		СообщитьПользователю(сТекстОшибки,2);
		Возврат;	
	КонецЕсли;
	
	сПуть_КаталогTEMP = КаталогВременныхФайлов();
	
	extractor.Декомпилировать(сПуть_ФайлTEMPОбработка, сПуть_КаталогTEMP);
	сПуть_КаталогРазборки = ОбъединитьПути(сПуть_КаталогTEMP, (Новый Файл(сПуть_ФайлTEMPОбработка)).ИмяБезРасширения);
	СообщитьПользователю("Обработка разобрана в каталог " + сПуть_КаталогРазборки, 1);
	
	Попытка
		УдалитьФайлы(сПуть_ФайлTEMPОбработка);
	Исключение
		сТекстОшибки = "Ошибка удаления временный файл обработки %1";
		сТекстОшибки = СтрШаблон(сТекстОшибки, PathIn);
		СообщитьПользователю(сТекстОшибки,2);
	КонецПопытки;
	
	мФайлыBSL = New array();
	мФайлыBSL = НайтиФайлы(сПуть_КаталогРазборки, BSL ,Истина);
	
	Если мФайлыBSL.Количество() > 0 Тогда
		Для каждого Файл Из мФайлыBSL Цикл
			СообщитьПользователю("Обрабатываю "+Файл.ПолноеИмя,1);
			delRegion(Файл.ПолноеИмя);
			delEndRegion(Файл.ПолноеИмя);
		КонецЦикла;
	Иначе
		сТекстОшибки = "В каталоге разборки %1 не найдены файлы модулей %2";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сПуть_КаталогРазборки, BSL);
		СообщитьПользователю(сТекстОшибки,2);
		Возврат;
	КонецЕсли;
	
	extractor.Компилировать(сПуть_КаталогРазборки, сПуть_КаталогTEMP, Ложь);
	СообщитьПользователю("Обработка собрана в каталог " + сПуть_ФайлTEMPОбработка, 1);
	
	сИмя_МастерОбработка = "";
	Если НЕ ПолучитьИмяМастерОбработки(сПуть_КаталогРазборки, сИмя_МастерОбработка) Тогда
		сТекстОшибки = "Ошибка при получении имени файла мастер-обработки.";
		СообщитьПользователю(сТекстОшибки,2);
		Возврат;
	КонецЕсли;
	
	сПуть_ФайлМастерОбработка = ОбъединитьПути(PathOut, сИмя_МастерОбработка);
	оФайл = Новый Файл(сПуть_ФайлМастерОбработка);
	Если оФайл.Существует() Тогда
		сТекстОшибки = "В каталоге мастер обработок %1 обработка с именем %2 уже существует. Выпуск прекращен.";
		сТекстОшибки = СтрШаблон(сТекстОшибки, PathOut, сИмя_МастерОбработка);
		СообщитьПользователю(сТекстОшибки,2);
		Возврат;
	Иначе
		Попытка
			КопироватьФайл(сПуть_ФайлTEMPОбработка,сПуть_ФайлМастерОбработка);
		Исключение
			сТекстОшибки = "Ошибка при копировании мастер-обработки из каталога %1 в каталог %2";
			сТекстОшибки = СтрШаблон(сТекстОшибки, сПуть_ФайлTEMPОбработка, сПуть_ФайлМастерОбработка);
			СообщитьПользователю(сТекстОшибки,2);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	СообщитьПользователю("**** ОБРАБОТКА " + сИмя_МастерОбработка + " ВЫПУЩЕНА ****");
	
	ОсвободитьОбъект(extractor);
	extractor = Неопределено;
	ВыполнитьСборкуМусора();
	
	Попытка
		УдалитьФайлы(сПуть_ФайлTEMPОбработка);
		УдалитьФайлы(сПуть_КаталогTEMP);	
	Исключение
		сТекстОшибки = "Ошибка удаления временных файлов";
		СообщитьПользователю(сТекстОшибки,2);
	КонецПопытки;

EndProcedure

// Заменить #Область в модуле обработки
//
// Параметры:
//   cFullPath - Строка - путь к файлу с текстом модуля
//
Procedure delRegion(cFullPath)	
	Перем сДанныеВх, сДанныеИсх, regExp;
	Перем сТекстЗамены, РЕГВЫР;

	РЕГВЫР = "[ \t]*#Область"; 
	сТекстЗамены = "// ОБЛАСТЬ НАЧАЛО";
	
	regExp = new regEx(РЕГВЫР);
	сДанныеВх 	= ПолучитьТекстИзФайла(cFullPath);
	сДанныеИсх 	= regExp.Заменить(сДанныеВх, сТекстЗамены);
	ЗаписатьРезультатВФайл(cFullPath, сДанныеИсх);
EndProcedure

// Заменить #КонецОбласти в модуле обработки
//
// Параметры:
//   cFullPath - Строка - путь к файлу с текстом модуля
//
Procedure delEndRegion(cFullPath)
	Перем сДанныеВх, сДанныеИсх, regExp;
	Перем сТекстЗамены, РЕГВЫР;
	
	РЕГВЫР = "[ \t]*#КонецОбласти"; 
	сТекстЗамены = "// ОБЛАСТЬ КОНЕЦ";

	regExp = new regEx(РЕГВЫР);
	сДанныеВх 	= ПолучитьТекстИзФайла(cFullPath);
	сДанныеИсх 	= regExp.Заменить(сДанныеВх, сТекстЗамены);	
	ЗаписатьРезультатВФайл(cFullPath, сДанныеИсх);
EndProcedure

Функция ПолучитьТекстИзФайла(сИмяФайла)
	Перем оФайл, Данные, оТекст;

	Данные = "";
	оФайл = Новый Файл(сИмяФайла);
	Если оФайл.Существует() Тогда
		оТекст = Новый ЧтениеТекста(сИмяФайла, КодировкаТекста.UTF8);
		Данные = оТекст.Прочитать();
		оТекст.Закрыть();
		ОсвободитьОбъект(оТекст);
	КонецЕсли;
	Возврат Данные;
КонецФункции

Процедура ЗаписатьРезультатВФайл(сИмяФайла, Данные)
	Перем оТекст;

	оТекст = Новый ЗаписьТекста(сИмяФайла, КодировкаТекста.UTF8); 
	оТекст.Записать(Данные); 
	оТекст.Закрыть();		
	ОсвободитьОбъект(оТекст);
КонецПроцедуры

// Копирует файл обработки во временную папку и возвращает путь к временному файлу
//
// Параметры:
//   оФайлОбработки - Объект.Файл - обработка, которую необходимо скопировать во временную папку
//   сПутьКФайлуОбработки - Строка - OUT. Полный путь к временному файлу
//
//  Возвращаемое значение:
//   Булево - признак выполнения без ошибок
//
Функция КопироватьОбработкуВTMP(оФайлОбработки, сПутьКФайлуОбработки)
	Перем бВыполненоБезОшибок, сТекстОшибки;
	Перем сПутьКВременномуФайлу;
	
	бВыполненоБезОшибок = Ложь;
	
	Если ТипЗнч(оФайлОбработки) <> Тип("Файл") Тогда
		сТекстОшибки = "В функции ""КопироватьОбработкуВTMP"" аргумент оФайлОбработки должен быть типа Файл";
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	сПутьКВременномуФайлу = ОбъединитьПути(КаталогВременныхФайлов(),ПолучитьИмяВременногоФайла(".epf"));
	Попытка
		КопироватьФайл(оФайлОбработки.ПолноеИмя, сПутьКВременномуФайлу);
	Исключение
		сТекстОшибки = "Ошибка при копировании файла во временную папку";
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецПопытки;
	
	сПутьКФайлуОбработки = сПутьКВременномуФайлу;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Сообщение пользователю с указанием типа сообщения
//
// Параметры:
//   сТекстСообщения - Строка - Сообщение пользователю
//   чТипСообщения - число - тип сообщения, где:
//		* 1 - Информация
//		* 2 - Ошибка
//
Процедура СообщитьПользователю(сТекстСообщения, чТипСообщения = 1)
	Перем сТекст;
	Перем ИНФОРМАЦИЯ, ОШИБКА;
	
	// КОНСТАНТЫ
	ИНФОРМАЦИЯ 	= "ИНФОРМАЦИЯ: ";
	ОШИБКА 		= "ОШИБКА: ";
	
	Если ТипЗнч(сТекстСообщения)<>Тип("Строка") ИЛИ ПустаяСтрока(сТекстСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если чТипСообщения = Неопределено ИЛИ ТипЗнч(чТипСообщения) <> Тип("Число")Тогда
		сТекст = ИНФОРМАЦИЯ+сТекстСообщения;
	ИначеЕсли чТипСообщения = 1 Тогда
		сТекст = ИНФОРМАЦИЯ+сТекстСообщения;
	ИначеЕсли чТипСообщения = 2 Тогда
		сТекст = ОШИБКА+сТекстСообщения;
	КонецЕсли;
	
	Сообщить(сТекст);
КонецПроцедуры

// Имя файла мастер-обработки (релиз)
//
// Параметры:
//   сПуть_КаталогРазборки - Строка - Каталог где находится разобранная обработка
//   сИмя_МастерОбработка - Строка - OUT. Имя файла мастер-обработки
//
//  Возвращаемое значение:
//   Булево - Признак выполнения без ошибок
//
Функция ПолучитьИмяМастерОбработки(сПуть_КаталогРазборки, сИмя_МастерОбработка)
	Перем бВыполненоБезОшибок, сТекстОшибки;
	Перем оФайл, сПутьМодульОбработки;
	Перем сВерсияОбработки, сНаименованиеОбработки;
	Перем МОДУЛЬОБРАБОТКИ;
	
	// КОНСТАНТЫ
	МОДУЛЬОБРАБОТКИ = "ObjectModule.bsl";
	
	бВыполненоБезОшибок = Ложь;
	Ожидаем.Что(ПустаяСтрока(сПуть_КаталогРазборки), "Функция ПолучитьИмяМастерОбработки. Недопустим пустой аргумент сПуть_КаталогРазборки.").ЭтоЛожь();
	
	// Версия обработки из переменной сОбработкаИнтеграции_Версия модуля обработки
	сПутьМодульОбработки = ОбъединитьПути(сПуть_КаталогРазборки, МОДУЛЬОБРАБОТКИ);
	оФайл = Новый Файл(сПутьМодульОбработки);
	Если НЕ оФайл.Существует() Тогда
		сТекстОшибки = "Не найден модуль обработки %1 в каталоге %2";
		сТекстОшибки = СтрШаблон(сТекстОшибки, МОДУЛЬОБРАБОТКИ, сПуть_КаталогРазборки)		;
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	сВерсияОбработки = "";
	Если НЕ ПолучитьВерсиюОбработки(сПутьМодульОбработки, сВерсияОбработки) Тогда
		сТекстОшибки = "Не удалось получить номер версии обработки.";
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	сНаименованиеОбработки = "";
	Если НЕ ПолучитьНаименованиеОбработки(сПуть_КаталогРазборки, сНаименованиеОбработки) Тогда
		сТекстОшибки = "Не удалось получить наименование объекта обработки.";
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	сИмя_МастерОбработка = сНаименованиеОбработки + "_" + сВерсияОбработки + ".epf";
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Версия обработки из предустановленной переменной модуля обработки
//
// Параметры:
//   сПутьМодульОбработки - Строка - Путь к файлу модуля обработки
//   сВерсияОбработки - Строка - OUT. Версия обработки
//
//  Возвращаемое значение:
//   Булевл - признак выполнения без ошибки
//
Функция ПолучитьВерсиюОбработки(сПутьМодульОбработки, сВерсияОбработки)
	Перем бВыполненоБезОшибок, сТекстОшибки;
	Перем сДанные, regExp, коллекцияСовпадений, коллекцияГрупп;
	Перем РЕГВЫР;
	
	// КОНСТАНТЫ
	РЕГВЫР = "сОбработка_Версия[ \t]*=[ \t]*""(\S+?)""";
	
	бВыполненоБезОшибок = Ложь;
	
	regExp = new regEx(РЕГВЫР);
	сДанные = ПолучитьТекстИзФайла(сПутьМодульОбработки);
	коллекцияСовпадений 	= regExp.НайтиСовпадения(сДанные);
	Если коллекцияСовпадений.Количество() > 0 Тогда
		коллекцияГрупп = коллекцияСовпадений[0].Группы;
		Если коллекцияГрупп.Количество() > 0 Тогда
			сВерсияОбработки = коллекцияГрупп[1].Значение;
		Иначе
			сТекстОшибки = "В модуле обработки %1 ненайдена группа регулярного выражения с номером версии";
			сТекстОшибки = СтрШаблон(сТекстОшибки, сПутьМодульОбработки, РЕГВЫР);
			СообщитьПользователю(сТекстОшибки, 2);
			Возврат бВыполненоБезОшибок;	
		КонецЕсли;
	Иначе
		сТекстОшибки = "В модуле обработки %1 совпадений с %2 не найдено";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сПутьМодульОбработки, РЕГВЫР);
		СообщитьПользователю(сТекстОшибки, 2);
		Возврат бВыполненоБезОшибок;	
	КонецЕсли;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Наименование объекта обработки
//
// Параметры:
//   сПуть_КаталогРазборки - Строка - каталог, где находится разобранная обработка
//   сНаименованиеОбработки - Строка - OUT. Наименование объекта обработки
//
//  Возвращаемое значение:
//   Булево - признак выполнения без ошибок
//
Функция ПолучитьНаименованиеОбработки(сПуть_КаталогРазборки, сНаименованиеОбработки)
	Перем бВыполненоБезОшибок, сТекстОшибки;
	Перем оФайл, сДанные, сПутьКRoot, сПутьКФайлуОписания, regExp;
	Перем коллекцияСовпадений, коллекцияГрупп;
	Перем сФайлаОписания_Имя;
	Перем КАТUND, РУТ, РЕГВЫР_ФАЙЛОПИС;
	
	// КОНСТАНТЫ
	КАТUND = "und";
	РУТ = "root";
	РЕГВЫР_ФАЙЛОПИС = "\w{8}-\w{4}-\w{4}-\w{4}-\w{12}";
	РЕГВЫР_ИМЯ = "\{\d,[\d]+,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n?";
	
	бВыполненоБезОшибок = Ложь;
	
	сПутьКRoot = ОбъединитьПути(сПуть_КаталогРазборки, КАТUND,РУТ);
	оФайл = Новый Файл(сПутьКRoot);
	Если НЕ оФайл.Существует() Тогда
		сТекстОшибки = "Не найден файл root в каталоге %1";
		сТекстОшибки = СтрШаблон(сТекстОшибки,сПутьКRoot);
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	regExp = new RegEx(РЕГВЫР_ФАЙЛОПИС);
	сДанные = ПолучитьТекстИзФайла(сПутьКRoot);
	коллекцияСовпадений = regExp.Matches(сДанные);
	Если коллекцияСовпадений.Количество() > 0 Тогда
		сФайлаОписания_Имя = коллекцияСовпадений[0].Значение;
		Если ТипЗнч(сФайлаОписания_Имя) <> Тип("Строка") ИЛИ ПустаяСтрока(сФайлаОписания_Имя) Тогда
			сТекстОшибки = "В файле %1 не найдено имя файла описания";
			сТекстОшибки = СтрШаблон(сТекстОшибки, сПутьКRoot);
			СообщитьПользователю(сТекстОшибки, 2);
			Возврат бВыполненоБезОшибок;	
		КонецЕсли;
	Иначе
		сТекстОшибки = "В файле %1 совпадений с %2 не найдено";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сПутьКRoot, РЕГВЫР_ФАЙЛОПИС);
		СообщитьПользователю(сТекстОшибки, 2);
		Возврат бВыполненоБезОшибок;	
	КонецЕсли;
	
	сПутьКФайлуОписания = ОбъединитьПути(сПуть_КаталогРазборки,	КАТUND,сФайлаОписания_Имя);
	оФайл = Новый Файл(сПутьКФайлуОписания);
	Если НЕ оФайл.Существует() Тогда
		сТекстОшибки = "Не найден файл описания в каталоге %1";
		сТекстОшибки = СтрШаблон(сТекстОшибки,сПутьКФайлуОписания);
		СообщитьПользователю(сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	regExp = new RegEx(РЕГВЫР_ИМЯ);
	сДанные = ПолучитьТекстИзФайла(сПутьКФайлуОписания);
	коллекцияСовпадений = regExp.Matches(сДанные);
	Если коллекцияСовпадений.Количество()>0 Тогда
		коллекцияГрупп = коллекцияСовпадений[0].Группы;
		Если коллекцияГрупп.Количество() > 0 Тогда
			сНаименованиеОбработки = коллекцияГрупп[2].Значение;
		Иначе
			сТекстОшибки = "В файле описаний %1 группы не найдены";
			сТекстОшибки = СтрШаблон(сТекстОшибки, сПутьКФайлуОписания);
			СообщитьПользователю(сТекстОшибки, 2);
			Возврат бВыполненоБезОшибок;	
		КонецЕсли;
	Иначе
		сТекстОшибки = "В файле описаний %1 совпадения с %2 не найдены";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сПутьКФайлуОписания, РЕГВЫР_ИМЯ);
		СообщитьПользователю(сТекстОшибки, 2);
		Возврат бВыполненоБезОшибок;	
	КонецЕсли;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции 

main();